@page "/crUpSubElement"
@page "/crUpSubElement/{id:int}"

@if(Id == null){
    <PageTitle>Create a new Element</PageTitle>

    <h3>Create a new Element</h3>
}

else
{
    <PageTitle>Edit @sub.Element</PageTitle>
    <h3> Edit @sub.Element</h3>
}

<EditForm Model="sub" OnSubmit="HandleSubmit">

    <div>
        <label for="Element">Element</label>
        <InputNumber id="Element" @bind-Value="sub.Element" class="form-control"></InputNumber>
    </div>

    <div>
        <label for="Type">Name</label>
        <InputText id="Type" @bind-Value="sub.Type" class="form-control"></InputText>
    </div>
    <div>
        <label for="QuantityOfWindows">Quantity Of Windows</label>
        <InputNumber id="Width" @bind-Value="sub.Width" class="form-control"></InputNumber>
    </div>
    <div>
        <label for="TotalSubElements">Total SubElements</label>
        <InputNumber id="Height" @bind-Value="sub.Height" class="form-control"></InputNumber>
    </div>

    <br />
  
    <button type="submit" class="btn btn-primary">@btnText</button>
    <button type="button" class="btn btn-danger" @onclick="DeleteSubElement">Delete SubElement</button>
</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }
    string btnText = string.Empty;
    SubElement sub = new SubElement();

    protected override async Task OnInitializedAsync()
    {
        btnText = Id == null ? "Save New window" : "Update window";
       
    }
    protected override async Task OnParametersSetAsync()
    {
      
        sub = await SubElementService.GetSubElement((int)Id);
        
    }

    async Task HandleSubmit()
    {
        if (Id == null)
        {
            await SubElementService.CreateSubElement(sub);
        }
        else
        {
            await SubElementService.UpdateSubElement(sub);
        }
    }

    async Task DeleteSubElement()
    {
        await SubElementService.DeleteSubElement(sub.Id);
    }

}
